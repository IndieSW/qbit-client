//
//  qbit-service.hp
//  QBit WebSocket Client
//
//  Created by Bandoian, Terence (CONT) on 7/7/15.
//
//  Copyright (c) 2015 PushPoint Mobile.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//


/* web socket protocols */

static struct libwebsocket_protocols webSocketProtocols[] = {
    { NULL, NULL, 0, 0, 0, NULL, NULL, 0, },
    { NULL, NULL, 0, 0, 0, NULL, NULL, 0, },
};


/* web socket context info */

static struct lws_context_creation_info webSocketContextInfo = {
	CONTEXT_PORT_NO_LISTEN,     /* port */
	0,                          /* iface */
	webSocketProtocols,         /* protocols */
	NULL,                       /* extensions */
	NULL,                       /* token_limits */
	NULL,                       /* ssl_private_key_password */
	NULL,                       /* ssl_cert_filepath */
	NULL,                       /* ssl_private_key_filepath */
	NULL,                       /* ssl_ca_filepath */
	NULL,                       /* ssl_cipher_list */
	NULL,                       /* http_proxy_address */
	0,                          /* http_proxy_port */
	-1,                         /* gid */
	-1,                         /* uid */
	0,                          /* options */
	NULL,                       /* user */
	0,                          /* ka_time */
	0,                          /* ka_probes */
	0,                          /* ka_interval */
	NULL,                       /* provided_client_ssl_ctx */
};


/* service command queue */

typedef enum {
    QSC_OPEN_CONNECTION,
    QSC_CLOSE_CONNECTION,
}
QBIT_SERVICE_COMMAND;

typedef struct {
    int connectionId;
    QBIT_CONNECTION_CALLBACK * connectionCallback;
    char * host;
    int port;
    char * path;
    int isSsl;
}
QBIT_OPEN_CONNECTION_DATA;

typedef struct {
    int connectionId;
}
QBIT_CLOSE_CONNECTION_DATA;

typedef struct {
    QBIT_SERVICE_COMMAND command;

    union {
        QBIT_OPEN_CONNECTION_DATA openConnectionData;
        QBIT_CLOSE_CONNECTION_DATA closeConnectionData;
    };
}
QBIT_SERVICE_QUEUE_ITEM_DATA;


/* service thread */

typedef struct {
    pthread_t id;
    QBIT_THREAD_STATUS status;
}
QBIT_SERVICE_THREAD;


/* service data */

static QBIT_SERVICE_THREAD qbitServiceThread = { 0 };
static QBIT_QUEUE qbitServiceQueue;
static QBIT_SERVICE_CALLBACK * qbitServiceCallback;

static struct libwebsocket_context * webSocketContext = NULL;


/* functions */

static QBIT_QUEUE_ITEM * allocQbitServiceCommand();
static void submitQbitServiceCommand( QBIT_QUEUE_ITEM * item );

static void * serviceQbitWebSocketEvents( void * webSocketContext );

static void processQbitServiceQueue(
    struct libwebsocket_context * webSocketContext );

static void processQbitOpenConnectionCommand(
    struct libwebsocket_context * webSocketContext,
    QBIT_OPEN_CONNECTION_DATA * openConnectionData );

static void processQbitCloseConnectionCommand(
    QBIT_CLOSE_CONNECTION_DATA * closeConnectionData );





